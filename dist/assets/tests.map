{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","dummy/tests/acceptance/ember-shepherd-test.js","dummy/tests/app.lint-test.js","dummy/tests/helpers/destroy-app.js","dummy/tests/helpers/module-for-acceptance.js","dummy/tests/helpers/resolver.js","dummy/tests/helpers/start-app.js","dummy/tests/test-helper.js","dummy/tests/tests.lint-test.js","dummy/tests/unit/services/tour-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('dummy/tests/acceptance/ember-shepherd-test', ['jquery', 'qunit', 'dummy/tests/helpers/module-for-acceptance'], function (_jquery, _qunit, _moduleForAcceptance) {\n  'use strict';\n\n  var container = void 0,\n      tour = void 0;\n\n  function patchClick(sel, container) {\n    find(sel, container)[0].click();\n  }\n\n  (0, _moduleForAcceptance.default)('Tour functionality tests', {\n    beforeEach: function beforeEach() {\n      container = this.application.__container__;\n      tour = container.lookup('service:tour');\n      tour.set('autoStart', false);\n      tour.set('modal', false);\n    },\n    afterEach: function afterEach() {\n      // Remove all Shepherd stuff, to start fresh each time.\n      find('.shepherd-active', 'body').removeClass('shepherd-active');\n      find('[class^=shepherd]', 'body').remove();\n      find('[id^=shepherd]', 'body').remove();\n      tour.cleanup();\n    }\n  });\n\n  (0, _qunit.test)('Shows cancel link', function (assert) {\n    visit('/');\n    click('.toggleHelpModal');\n    andThen(function () {\n      var cancelLink = find('.shepherd-cancel-link', 'body');\n      assert.ok(cancelLink);\n    });\n  });\n\n  (0, _qunit.test)('Hides cancel link', function (assert) {\n    var defaults = {\n      classes: 'shepherd-element shepherd-open shepherd-theme-arrows test-defaults',\n      showCancelLink: false\n    };\n\n    var steps = [{\n      id: 'test-highlight',\n      options: {\n        attachTo: '.first-element bottom',\n        builtInButtons: [{\n          classes: 'shepherd-button-secondary cancel-button',\n          text: 'Exit',\n          type: 'cancel'\n        }, {\n          classes: 'shepherd-button-primary next-button',\n          text: 'Next',\n          type: 'next'\n        }],\n        showCancelLink: false,\n        classes: 'shepherd shepherd-open shepherd-theme-arrows shepherd-transparent-text',\n        copyStyles: false,\n        highlightClass: 'highlight',\n        title: 'Welcome to Ember-Shepherd!',\n        text: ['Testing highlight']\n      }\n    }];\n\n    visit('/');\n\n    andThen(function () {\n      tour.cancel();\n      tour.set('defaults', defaults);\n      tour.set('steps', steps);\n      tour.set('autoStart', false);\n      click('.toggleHelpModal');\n      andThen(function () {\n        assert.equal(find('.shepherd-open a.shepherd-cancel-link', 'body').length, 0);\n      });\n    });\n  });\n\n  (0, _qunit.test)('Cancel link cancels the tour', function (assert) {\n    visit('/');\n    click('.toggleHelpModal');\n\n    andThen(function () {\n      assert.equal(find('.shepherd-active', 'html').length, 1, 'Body has class of shepherd-active, when shepherd becomes active');\n      patchClick('.shepherd-content a.shepherd-cancel-link', 'body');\n      andThen(function () {\n        assert.equal(find('.shepherd-active', 'html').length, 0, 'Body does not have class of shepherd-active, when shepherd becomes inactive');\n      });\n    });\n  });\n\n  (0, _qunit.test)('Modal page contents', function (assert) {\n    assert.expect(3);\n\n    visit('/');\n\n    click('.toggleHelpModal');\n\n    andThen(function () {\n      assert.equal(find('.shepherd-active', 'html').length, 1, 'Body gets class of shepherd-active, when shepherd becomes active');\n      assert.equal(find('.shepherd-enabled', 'body').length, 2, 'attachTo element and tour have shepherd-enabled class');\n      assert.equal(find('#shepherdOverlay', 'body').length, 1, '#shepherdOverlay exists, since modal');\n    });\n  });\n\n  (0, _qunit.test)('Non-modal page contents', function (assert) {\n    assert.expect(3);\n\n    visit('/');\n    andThen(function () {\n      tour.cancel();\n\n      click('.toggleHelpNonmodal');\n\n      andThen(function () {\n        assert.equal(find('body.shepherd-active', 'html').length, 1, 'Body gets class of shepherd-active, when shepherd becomes active');\n        assert.equal(find('.shepherd-enabled', 'body').length, 2, 'attachTo element and tour get shepherd-enabled class');\n        assert.equal(find('#shepherdOverlay', 'body').length, 0, '#shepherdOverlay should not exist, since non-modal');\n      });\n    });\n  });\n\n  (0, _qunit.test)('Tour next, back, and cancel builtInButtons work', function (assert) {\n    assert.expect(3);\n\n    visit('/');\n\n    click('.toggleHelpModal');\n\n    andThen(function () {\n      patchClick('.shepherd-content a:contains(Next)', 'body');\n      assert.equal(find('.back-button', '.shepherd-enabled', 'body').length, 1, 'Ensure that the back button appears');\n      patchClick('.shepherd-content a:contains(Back)', 'body');\n      assert.equal(find('.back-button', '.shepherd-enabled', 'body').length, 0, 'Ensure that the back button disappears');\n      patchClick('.shepherd-content a:contains(Exit)', 'body');\n      assert.equal(find('[class^=shepherd-button]:visible', 'body').length, 0, 'Ensure that all buttons are gone, after exit');\n    });\n  });\n\n  (0, _qunit.test)('Highlight applied', function (assert) {\n    assert.expect(2);\n\n    var steps = [{\n      id: 'test-highlight',\n      options: {\n        attachTo: '.first-element bottom',\n        builtInButtons: [{\n          classes: 'shepherd-button-secondary cancel-button',\n          text: 'Exit',\n          type: 'cancel'\n        }, {\n          classes: 'shepherd-button-primary next-button',\n          text: 'Next',\n          type: 'next'\n        }],\n        classes: 'shepherd shepherd-open shepherd-theme-arrows shepherd-transparent-text',\n        copyStyles: false,\n        highlightClass: 'highlight',\n        title: 'Welcome to Ember-Shepherd!',\n        text: ['Testing highlight']\n      }\n    }];\n\n    visit('/');\n\n    andThen(function () {\n      tour.set('steps', steps);\n      tour.set('modal', true);\n      click('.toggleHelpModal');\n\n      andThen(function () {\n        assert.equal(find('.highlight', 'body').length, 1, 'currentElement highlighted');\n        patchClick('.shepherd-content a:contains(Exit)', 'body');\n        assert.equal(find('.highlight', 'body').length, 0, 'highlightClass removed on cancel');\n      });\n    });\n  });\n\n  (0, _qunit.test)('Highlight applied when `tour.modal == false`', function (assert) {\n    assert.expect(2);\n\n    var steps = [{\n      id: 'test-highlight',\n      options: {\n        attachTo: '.first-element bottom',\n        builtInButtons: [{\n          classes: 'shepherd-button-secondary cancel-button',\n          text: 'Exit',\n          type: 'cancel'\n        }, {\n          classes: 'shepherd-button-primary next-button',\n          text: 'Next',\n          type: 'next'\n        }],\n        classes: 'shepherd shepherd-open shepherd-theme-arrows shepherd-transparent-text',\n        copyStyles: false,\n        highlightClass: 'highlight',\n        title: 'Welcome to Ember-Shepherd!',\n        text: ['Testing highlight']\n      }\n    }];\n\n    visit('/');\n\n    andThen(function () {\n      tour.set('steps', steps);\n      click('.toggleHelpNonmodal');\n\n      andThen(function () {\n        assert.equal(find('.highlight', 'body').length, 1, 'currentElement highlighted');\n        patchClick('.shepherd-content a:contains(Exit)', 'body');\n        assert.equal(find('.highlight', 'body').length, 0, 'highlightClass removed on cancel');\n      });\n    });\n  });\n\n  (0, _qunit.test)('Defaults applied', function (assert) {\n    assert.expect(1);\n\n    var defaults = {\n      classes: 'shepherd-element shepherd-open shepherd-theme-arrows test-defaults',\n      scrollTo: false,\n      showCancelLink: true\n    };\n\n    var steps = [{\n      id: 'test-defaults-classes',\n      options: {\n        attachTo: '.first-element bottom',\n        builtInButtons: [{\n          classes: 'shepherd-button-secondary cancel-button',\n          text: 'Exit',\n          type: 'cancel'\n        }, {\n          classes: 'shepherd-button-primary next-button',\n          text: 'Next',\n          type: 'next'\n        }],\n        copyStyles: false,\n        highlightClass: 'highlight',\n        title: 'Welcome to Ember-Shepherd!',\n        text: ['Testing defaults']\n      }\n    }];\n\n    visit('/');\n    andThen(function () {\n      tour.set('defaults', defaults);\n      tour.set('steps', steps);\n      click('.toggleHelpModal');\n\n      andThen(function () {\n        assert.equal(find('.test-defaults', 'body').length, 1, 'defaults class applied');\n        patchClick('.shepherd-content a:contains(Exit)', 'body');\n      });\n    });\n  });\n\n  (0, _qunit.test)('configuration works with attachTo object when element is a simple string', function (assert) {\n    assert.expect(1);\n\n    // Override default behavior\n    var steps = [{\n      id: 'test-highlight',\n      options: {\n        attachTo: {\n          element: '.first-element',\n          on: 'bottom'\n        },\n        builtInButtons: [{\n          classes: 'shepherd-button-secondary cancel-button',\n          text: 'Exit',\n          type: 'cancel'\n        }, {\n          classes: 'shepherd-button-primary next-button',\n          text: 'Next',\n          type: 'next'\n        }],\n        classes: 'shepherd shepherd-open shepherd-theme-arrows shepherd-transparent-text',\n        copyStyles: false,\n        highlightClass: 'highlight',\n        title: 'Welcome to Ember-Shepherd!',\n        text: ['Testing highlight']\n      }\n    }];\n\n    tour.set('steps', steps);\n\n    visit('/');\n    click('.toggleHelpModal');\n    andThen(function () {\n      assert.ok(find('.shepherd-step', 'body').length, 'tour is visible');\n    });\n  });\n\n  (0, _qunit.test)('configuration works with attachTo object when element is dom element', function (assert) {\n    assert.expect(1);\n\n    // Override default behavior\n    var steps = [{\n      id: 'test-highlight',\n      options: {\n        attachTo: {\n          element: (0, _jquery.default)('.medium-8:first')[0],\n          on: 'bottom'\n        },\n        builtInButtons: [{\n          classes: 'shepherd-button-secondary cancel-button',\n          text: 'Exit',\n          type: 'cancel'\n        }, {\n          classes: 'shepherd-button-primary next-button',\n          text: 'Next',\n          type: 'next'\n        }],\n        classes: 'shepherd shepherd-open shepherd-theme-arrows shepherd-transparent-text',\n        copyStyles: false,\n        highlightClass: 'highlight',\n        title: 'Welcome to Ember-Shepherd!',\n        text: ['Testing highlight']\n      }\n    }];\n\n    tour.set('steps', steps);\n\n    visit('/');\n    click('.toggleHelpModal');\n    andThen(function () {\n      assert.ok(find('.shepherd-step', 'body').length, 'tour is visible');\n    });\n  });\n\n  (0, _qunit.test)('buttons work when type is not specified and passed action is triggered', function (assert) {\n    assert.expect(4);\n    var buttonActionCalled = false;\n\n    var steps = [{\n      id: 'test-highlight',\n      options: {\n        attachTo: {\n          element: (0, _jquery.default)('.medium-8:first')[0],\n          on: 'bottom'\n        },\n        builtInButtons: [{\n          classes: 'shepherd-button-secondary button-one',\n          text: 'button one'\n        }, {\n          classes: 'shepherd-button-secondary button-two',\n          text: 'button two',\n          action: function action() {\n            return buttonActionCalled = true;\n          }\n        }, {\n          classes: 'shepherd-button-secondary button-three',\n          text: 'button three',\n          action: function action() {}\n        }],\n        classes: 'shepherd shepherd-open shepherd-theme-arrows shepherd-transparent-text',\n        copyStyles: false,\n        highlightClass: 'highlight',\n        title: 'Welcome to Ember-Shepherd!',\n        text: ['Testing highlight']\n      }\n    }];\n\n    visit('/');\n\n    andThen(function () {\n      tour.set('steps', steps);\n\n      click('.toggleHelpModal');\n\n      andThen(function () {\n        assert.ok(find('.button-one', 'body').length, 'tour button one is visible');\n        assert.ok(find('.button-two', 'body').length, 'tour button two is visible');\n        assert.ok(find('.button-three', 'body').length, 'tour button three is visible');\n        patchClick('.button-two', 'body');\n      });\n\n      andThen(function () {\n        assert.ok(buttonActionCalled, 'button action triggered');\n      });\n    });\n  });\n\n  (0, _qunit.test)('`pointer-events` is set to `auto` for any step element on clean up', function (assert) {\n    assert.expect(4);\n    visit('/');\n\n    click('.toggleHelpModal');\n\n    // Go through a step of the tour...\n    andThen(function () {\n      patchClick('.next-button', '[data-id=\"intro\"]');\n    });\n\n    // Check the target elements have pointer-events = 'none'\n    andThen(function () {\n      // Get the 2 shepherd-target's\n      find('.shepherd-target').map(function (key, elem) {\n        assert.equal(elem.style.pointerEvents, 'none');\n      });\n\n      // Exit the tour\n      patchClick('.cancel-button', '[data-id=\"installation\"]');\n    });\n\n    // Check all the target elements now have pointer-events = 'auto'\n    andThen(function () {\n      // Get the 2 shepherd-target's again\n      find('.shepherd-target').map(function (key, elem) {\n        assert.equal(elem.style.pointerEvents, 'auto');\n      });\n    });\n  });\n\n  (0, _qunit.test)('scrollTo works with disableScroll on', function (assert) {\n    assert.expect(2);\n    // Setup controller tour settings\n    tour.set('disableScroll', true);\n    tour.set('scrollTo', true);\n\n    // Visit route\n    visit('/');\n\n    (0, _jquery.default)('#ember-testing-container').scrollTop(0);\n\n    assert.equal((0, _jquery.default)('#ember-testing-container').scrollTop(), 0, 'Scroll is initially 0');\n\n    click('.toggleHelpModal');\n\n    andThen(function () {\n      patchClick('.shepherd-content a:contains(Next)', 'body');\n      andThen(function () {\n        patchClick('.shepherd-content a:contains(Next)', 'body');\n      });\n      andThen(function () {\n        assert.ok((0, _jquery.default)('#ember-testing-container').scrollTop() > 0, 'Scrolled down correctly');\n      });\n    });\n  });\n\n  (0, _qunit.test)('scrollTo works with a custom scrollToHandler', function (assert) {\n    assert.expect(2);\n    // Override default behavior\n    var steps = [{\n      id: 'intro',\n      options: {\n        attachTo: '.first-element bottom',\n        builtInButtons: [{\n          classes: 'shepherd-button-secondary cancel-button',\n          text: 'Exit',\n          type: 'cancel'\n        }, {\n          classes: 'shepherd-button-primary next-button',\n          text: 'Next',\n          type: 'next'\n        }],\n        classes: 'shepherd shepherd-open shepherd-theme-arrows shepherd-transparent-text',\n        copyStyles: false,\n        title: 'Welcome to Ember Shepherd!',\n        text: ['A field that has rested gives a bountiful crop.'],\n        scrollTo: true,\n        scrollToHandler: function scrollToHandler() {\n          return (0, _jquery.default)('#ember-testing-container').scrollTop(120);\n        }\n      }\n    }];\n\n    // Visit route\n    visit('/');\n\n    andThen(function () {\n      tour.set('steps', steps);\n\n      (0, _jquery.default)('#ember-testing-container').scrollTop(0);\n      assert.equal((0, _jquery.default)('#ember-testing-container').scrollTop(), 0, 'Scroll is initially 0');\n\n      click('.toggleHelpModal');\n\n      andThen(function () {\n        patchClick('.shepherd-content a:contains(Next)', 'body');\n        assert.ok((0, _jquery.default)('#ember-testing-container').scrollTop() === 120, 'Scrolled correctly');\n      });\n    });\n  });\n\n  (0, _qunit.test)('scrollTo works without a custom scrollToHandler', function (assert) {\n    assert.expect(2);\n    // Setup controller tour settings\n    tour.set('scrollTo', true);\n\n    // Visit route\n    visit('/');\n\n    (0, _jquery.default)('#ember-testing-container').scrollTop(0);\n\n    assert.equal((0, _jquery.default)('#ember-testing-container').scrollTop(), 0, 'Scroll is initially 0');\n\n    click('.toggleHelpModal');\n\n    andThen(function () {\n      patchClick('.shepherd-content a:contains(Next)', 'body');\n      andThen(function () {\n        assert.ok((0, _jquery.default)('#ember-testing-container').scrollTop() > 0, 'Scrolled correctly');\n      });\n    });\n  });\n});","define('dummy/tests/app.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/application.js should pass ESLint\\n\\n');\n  });\n});","define('dummy/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = destroyApp;\n  var run = _ember.default.run;\n  function destroyApp(application) {\n    run(application, 'destroy');\n  }\n});","define('dummy/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'ember', 'dummy/tests/helpers/start-app', 'dummy/tests/helpers/destroy-app'], function (exports, _qunit, _ember, _startApp, _destroyApp) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  exports.default = function (name) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _startApp.default)();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return resolve(afterEach).then(function () {\n          return (0, _destroyApp.default)(_this.application);\n        });\n      }\n    });\n  };\n\n  var resolve = _ember.default.RSVP.resolve;\n});","define('dummy/tests/helpers/resolver', ['exports', 'dummy/resolver', 'dummy/config/environment'], function (exports, _resolver, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n\n  var resolver = _resolver.default.create();\n\n  resolver.namespace = {\n    modulePrefix: _environment.default.modulePrefix,\n    podModulePrefix: _environment.default.podModulePrefix\n  };\n\n  exports.default = resolver;\n});","define('dummy/tests/helpers/start-app', ['exports', 'ember', 'dummy/app', 'dummy/config/environment'], function (exports, _ember, _app, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = startApp;\n  var merge = _ember.default.merge,\n      run = _ember.default.run;\n  function startApp(attrs) {\n    var attributes = merge({}, _environment.default.APP);\n    attributes = merge(attributes, attrs); // use defaults, but you can override;\n\n    return run(function () {\n      var application = _app.default.create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n      return application;\n    });\n  }\n});","define('dummy/tests/test-helper', ['dummy/tests/helpers/resolver', 'ember-qunit', 'ember-cli-qunit'], function (_resolver, _emberQunit, _emberCliQunit) {\n  'use strict';\n\n  (0, _emberQunit.setResolver)(_resolver.default);\n  (0, _emberCliQunit.start)();\n});","define('dummy/tests/tests.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('acceptance/ember-shepherd-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/ember-shepherd-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/destroy-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/module-for-acceptance.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/start-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/services/tour-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/tour-test.js should pass ESLint\\n\\n');\n  });\n});","define('dummy/tests/unit/services/tour-test', ['ember', 'ember-qunit'], function (_ember, _emberQunit) {\n  'use strict';\n\n  var EmberObject = _ember.default.Object,\n      run = _ember.default.run;\n\n\n  var steps = [{\n    id: 'intro',\n    options: {\n      attachTo: '.test-element bottom',\n      builtInButtons: [{\n        classes: 'shepherd-button-secondary',\n        text: 'Exit',\n        type: 'cancel'\n      }, {\n        classes: 'shepherd-button-primary',\n        text: 'Next',\n        type: 'next'\n      }],\n      classes: 'shepherd shepherd-open shepherd-theme-arrows shepherd-transparent-text',\n      copyStyles: false,\n      title: 'Welcome to Ember-Shepherd!',\n      text: ['Test text'],\n      scrollTo: true,\n      scrollToHandler: function scrollToHandler() {\n        return 'custom scrollToHandler';\n      }\n    }\n  }];\n\n  (0, _emberQunit.moduleFor)('service:tour', 'Unit | Service | tour', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  (0, _emberQunit.test)('it starts the tour when the `start` event is triggered', function (assert) {\n    assert.expect(1);\n\n    var mockTourObject = EmberObject.extend({\n      start: function start() {\n        assert.ok(true, 'The tour was started');\n      }\n    }).create();\n\n    var service = this.subject({\n      steps: steps\n    });\n\n    service.set('tourObject', mockTourObject);\n\n    run(function () {\n      service.start();\n    });\n  });\n\n  (0, _emberQunit.test)('it allows another object to bind to events', function (assert) {\n    assert.expect(1);\n\n    var mockTourObject = EmberObject.extend({\n      next: function next() {}\n    }).create();\n\n    var service = this.subject({\n      steps: steps\n    });\n\n    service.set('tourObject', mockTourObject);\n\n    service.on('next', function () {\n      assert.ok(true);\n    });\n\n    run(function () {\n      service.next();\n    });\n  });\n\n  (0, _emberQunit.test)('it passes through a custom scrollToHandler option', function (assert) {\n    assert.expect(1);\n\n    var mockTourObject = EmberObject.extend({\n      start: function start() {\n        assert.equal(steps[0].options.scrollToHandler(), 'custom scrollToHandler', 'The handler was passed through as an option on the step');\n      }\n    }).create();\n\n    var service = this.subject({\n      steps: steps\n    });\n\n    service.set('tourObject', mockTourObject);\n\n    run(function () {\n      service.start();\n    });\n  });\n});","require('dummy/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappingsfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChGA;AACA;","file":"tests.js"}